@model TopicViewModel

@using System.Security.Claims;

@{
    ViewData["Title"] = Model.Title;
}

@section sidebar{
    <div id="sidebar">
        <!--右侧用户面板-->
        <!--用户面板-调用视图组件-显示登陆用户信息-->
        @await Component.InvokeAsync(nameof(UserPanel),new { username = Model.Author.Name })

        <!--右侧显示无人回复的话题-->
        <div class="panel">
            <div class="header">
                <span class="col_fade">无人回复的话题</span>
            </div>
            <div class="inner">
                <!--无人回复的话题-调用视图组件-->
                @await Component.InvokeAsync(nameof(ZeroReplySubject))
            </div>
        </div>

        <!--右侧等级用户排行-->
        <div class="panel">
            <div class="header">
                <span class="col_fade">积分榜</span>
                &nbsp;
                <a class="dark" href="@Url.Action("Top100","User")">TOP 100 &gt;&gt;</a>
            </div>
            <div class="inner">
                <!--前10用户-调用视图组件-->
                @await Component.InvokeAsync(nameof(Top10))
            </div>
        </div>
        <!--右侧等级用户排行-->
    </div>
}

<div id="content">
    <div class="panel">
        <div class="header topic_header">
            <span class="topic_full_title">
                @Model.Title
            </span>
            <div class="changes">
                <span>
                    发布于 @Model.Topic.CreateDateTime
                </span>
                <span>
                    作者 <a href="@Url.Content($"/User/Index/{Model.Author.UserId}")">@Model.Author.Name</a>
                </span>
                <span>
                    @Model.Topic.Visit_Count 次浏览
                </span>
                <span>
                    来自
                    @switch(Model.Tab)
                    {
                        case 1:
                            @TopicTypeViewModel.精华;
                        break;
                        case 2:
                            @TopicTypeViewModel.分享;
                        break;
                        case 3:
                            @TopicTypeViewModel.问答;
                        break;
                        case 4:
                            @TopicTypeViewModel.二手;
                        break;
                        default:
                        break;
                    }
                </span>
                @*判断是否已收藏*@
                @if(User.Claims.Any(p => p.Type == ClaimTypes.Name))
                {
                    if(Model.Collected)
                    {
                        <input class="span-common pull-right collect_btn" type="button" value="取消收藏" action="@Url.Content($"CollecteDel/{Model.Topic.TopicId}")">
                    }
                    else
                    {
                        <input class="span-common span-success pull-right collect_btn" type="button" value="收藏" action="@Url.Content($"Collecte/{Model.Topic.TopicId}")">
                    }
                }
            </div>
            <div id="manage_topic">
                @if(Model.Author.Name == User.Identity.Name || (Model.LoginUser != null && Model.LoginUser.IsAdmin))
                {
                    <a href="@Url.Content($"/Topic/Edit/{Model.Topic.TopicId}")">
                        <i class="fa fa-lg fa-pencil-square-o" title="编辑"></i>
                    </a>
                    <a href="javascript:;" data-id="@Model.Topic.TopicId" class="delete_topic_btn">
                        <i class="fa fa-lg fa-trash" title="删除"></i>
                    </a>

                    if(Model.LoginUser!=null && Model.LoginUser.IsAdmin)
                    {
                        @*置顶*@
                        <a class="topic_top_good" id="@Url.Content($"/Topic/Top/{Model.Topic.TopicId}")" href="javascript:;" data-method="post">
                            @if(Model.Topic.Top)
                            {
                                <i class="fa fa-lg fa-star" title="取消置顶"></i>
                            }
                            else
                            {
                                <i class="fa fa-lg fa-star-o" title="置顶"></i>
                            }
                        </a>
                        @*精华*@
                        <a class="topic_top_good" id="@Url.Content($"/Topic/Good/{Model.Topic.TopicId}")" href="javascript:;" data-method="post">
                            @if(Model.Topic.Good)
                            {
                                <i class="fa fa-lg fa-heart" title="取消精华"></i>
                            }
                            else
                            {
                                <i class="fa fa-lg fa-heart-o" title="加为精华"></i>
                            }
                        </a>
                    }
                }
                
            </div>
        </div>
        <div class="inner topic">
            <div class="topic_content">
                <div class="markdown-text">
                    <p id="topicContent">@Html.Raw(Model.Html)</p>
                </div>
            </div>
        </div>
    </div>

    @if(Model.Topic.Reply_Count > 0)
    {
        <div class='panel'>
            @*回复列表*@
            @await Component.InvokeAsync(nameof(TopicReplies),new { topicId = Model.Topic.TopicId })
            @*回复列表*@
        </div>
    }

    @if(User.Claims.Any(p => p.Type == ClaimTypes.Name))
    {
        <div class="panel" id="add_reply">
            <div class="header">
                <span class="col_fade">添加回复</span>
            </div>
            @Html.ValidationSummary()
            <div class="inner reply">
                <form id="reply_form" action="@Url.Content($"/Reply/Add/{Model.Topic.TopicId}")" method="post">
                    @Html.AntiForgeryToken()
                    <div class="markdown_editor in_editor">
                        <div class="markdown_in_editor">
                            <textarea class='editor' name='r_content' rows='8'></textarea>
                            <div class="editor_buttons">
                                <input class="span-primary submit_btn" type="submit" data-loading-text="回复中.." value="回复">
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    }
</div>

<div class="replies_history" style="display: none;">
    <div class="inner_content"></div>
    <div class="anchor"></div>
</div>
<!-- 预览模态对话框 -->
<div class="modal fade" id="preview-modal">
    <div class="modal-body" style="max-height: initial;">
        @*<img src="@Url.Content($"/Topic/Index/{Model.Topic.TopicId}")" alt="点击内容或者外部自动关闭图片预览" id="preview-image">*@
    </div>
</div>

@if(User.Claims.Any(p => p.Type == ClaimTypes.Name))
{
    <script type="text/javascript" src="~/libs/editor/editor.js"></script>
    <script type="text/javascript" src="~/libs/webuploader/webuploader.withoutimage.js"></script>
    <script type="text/javascript" src="~/libs/editor/ext.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            // 获取所有回复者name
            var allNames = $('.reply_author').map(function (idx, ele) {
                return $(ele).text().trim();
            }).toArray();
            allNames.push($('.user_card .user_name').text())
            allNames = _.uniq(allNames);
            // END 获取所有回复者name

            // 编辑器相关
            $('textarea.editor').each(function () {
                var editor = new Editor({
                    status: []
                });
                var $el = $(this);

                editor.render(this);
                //绑定editor
                $(this).data('editor', editor);

                var $input = $(editor.codemirror.display.input);
                $input.keydown(function (event) {
                    if (event.keyCode === 13 && (event.ctrlKey || event.metaKey)) {
                        event.preventDefault();
                        $el.closest('form').submit();
                    }
                });

                // at.js 配置
                var codeMirrorGoLineUp = CodeMirror.commands.goLineUp;
                var codeMirrorGoLineDown = CodeMirror.commands.goLineDown;
                var codeMirrorNewlineAndIndent = CodeMirror.commands.newlineAndIndent;
                $input.atwho({
                    at: '@@',
                    data: allNames
                })
                .on('shown.atwho', function () {
                    CodeMirror.commands.goLineUp = _.noop;
                    CodeMirror.commands.goLineDown = _.noop;
                    CodeMirror.commands.newlineAndIndent = _.noop;
                })
                .on('hidden.atwho', function () {
                    CodeMirror.commands.goLineUp = codeMirrorGoLineUp;
                    CodeMirror.commands.goLineDown = codeMirrorGoLineDown;
                    CodeMirror.commands.newlineAndIndent = codeMirrorNewlineAndIndent;
                });
                // END at.js 配置

            });
            // END 编辑器相关

            // 评论回复
            $('#content').on('click', '.reply2_btn', function (event) {
                var $btn = $(event.currentTarget);
                var parent = $btn.closest('.reply_area');
                var editorWrap = parent.find('.reply2_form');
                parent.find('.reply2_area').prepend(editorWrap);
                var textarea = editorWrap.find('textarea.editor');
                var user = $btn.closest('.author_content').find('.reply_author').text().trim();
                var editor = textarea.data('editor');
                editorWrap.show('fast', function () {
                    var cm = editor.codemirror;
                    cm.focus();
                    if (cm.getValue().indexOf('@@' + user) < 0) {
                        editor.push('@@' + user + ' ');
                    }
                });
            });

            $('#content').on('click', '.reply2_at_btn', function (event) {
                var $btn = $(event.currentTarget);
                var editorWrap = $btn.closest('.reply2_area').find('.reply2_form');
                $btn.closest('.reply2_item').after(editorWrap);
                var textarea = editorWrap.find('textarea.editor');
                var user = $btn.closest('.reply2_item').find('.reply_author').text().trim();
                var editor = textarea.data('editor');
                editorWrap.show('fast', function () {
                    var cm = editor.codemirror;
                    cm.focus();
                    if (cm.getValue().indexOf('@@' + user) < 0) {
                        editor.push('@@' + user + ' ');
                    }
                });
            });
            // END 评论回复

            // 加入收藏
            $('.collect_btn').click(function () {
                var $me = $(this);
                var addToCollect= '@Url.Content($"Collecte/{Model.Topic.TopicId}")';
                var delCollect= '@Url.Content($"CollecteDel/{Model.Topic.TopicId}")';
                var action = $me.attr('action');

                var topicId=@Model.Topic.TopicId;
                var data = {
                    topic_id: topicId
                };
                var $countSpan = $('.collect-topic-count');
                $.post('/Topic/' + action, data, function (data) {
                    if (data.status === 'success') {
                        if (action == addToCollect) {
                            $me.val('取消收藏');
                            $me.attr('action', delCollect);
                        } else {
                            $me.val('收藏');
                            $me.attr('action', addToCollect);
                        }
                        $me.toggleClass('span-success');
                    }else{
                        alert('收藏失败');
                    }
                }, 'json');
            });
            // END 加入收藏

            // 删除回复
            $('#content').on('click', '.delete_reply_btn, .delete_reply2_btn', function (event) {
                var $me = $(event.currentTarget);
                if (confirm('确定要删除此回复吗？')) {
                    var reply_id = null;
                    if ($me.hasClass('delete_reply_btn')) {
                        reply_id = $me.closest('.reply_item').attr('reply_id');
                    }
                    if ($me.hasClass('delete_reply2_btn')) {
                        reply_id = $me.closest('.reply2_item').attr('reply_id');
                    }
                    var data = {
                        reply_id: reply_id
                    };
                    $.post('/Reply/delete/' + reply_id, data, function (data) {
                        if (data.status === 'success') {
                            if ($me.hasClass('delete_reply_btn')) {
                                $me.closest('.reply_item').remove();
                            }
                            if ($me.hasClass('delete_reply2_btn')) {
                                $me.closest('.reply2_item').remove();
                            }
                            //回复数量-1
                            var reply_count=$('#reply_count').text();
                            var count= Number(reply_count)-1;
                            $('#reply_count').text(count);
                        }
                    }, 'json');
                }
                return false;
            });
            // END 删除回复

            // 删除话题
            $('.delete_topic_btn').click(function () {
                var topicId = $(this).data('id');
                console.log(topicId);
                if (confirm('确定要删除此话题吗？')) {
                    $.post('@Url.Content($"/Topic/Delete/{Model.Topic.TopicId}")', {}, function (result) {
                        if (!result.success) {
                            alert(result.message);
                        } else {
                            location.href = '/';
                        }
                    });
                }
                return false;
            });
            // END 删除话题

            // 用户 hover 在回复框时才显示点赞按钮
            //$('.reply_area').hover(
            //  function () {
            //      $(this).find('.up_btn').removeClass('invisible');
            //  },
            //  function () {
            //      var $this = $(this);
            //      if ($this.find('.up-count').text().trim() === '') {
            //          $this.find('.up_btn').addClass('invisible');
            //      }
            //  });
            // END 用户 hover 在回复框时才显示点赞按钮

            $('.topic_top_good').click(function(){
                var $a=$(this);
                var url=$a.attr('id');
                var id=@Model.Topic.TopicId;
                $.post(url,{id:id},function(data){
                    if(data.status!= 'error'){
                        if(data.status=='top'){
                            $a.html('<i class="fa fa-lg fa-star" title="取消置顶"></i>');
                            //$a.children('i').remove();
                        }else if(data.status=='cancel_top'){
                            $a.html('<i class="fa fa-lg fa-star-o" title="置顶"></i>');
                        }else if(data.status=='good'){
                            $a.html('<i class="fa fa-lg fa-heart" title="取消精华"></i>');
                        }else if(data.status=='cancel_good'){
                            $a.html('<i class="fa fa-lg fa-heart-o" title="加为精华"></i>');
                        }
                    }
                })
            })
        });
    </script>
}

<script type="text/javascript">
  (function(){
    var timer = null; //对话框延时定时器
    // 初始化 $('.replies_history')
    var $repliesHistory = $('.replies_history');
    var $repliesHistoryContent = $repliesHistory.find('.inner_content');
    $repliesHistory.hide();
    // END
    // 鼠标移入对话框清除隐藏定时器；移出时隐藏对话框
    $repliesHistory.on('mouseenter', function(){
      clearTimeout(timer);
    }).on('mouseleave', function(){
      $repliesHistory.fadeOut('fast');
    });
    // 显示被 at 用户的本页评论
    if ($('.reply2_item').length === 0) {
      // 只在流式评论布局中使用

      $('#content').on('mouseenter', '.reply_content a', function (e) {
        clearTimeout(timer);
        var $this = $(this);
        if ($this.text()[0] === '@@') {
          var thisText = $this.text().trim();
          var loginname = thisText.slice(1);
          var offset = $this.offset();
          var width = $this.width();
          var mainOffset = $('#main').offset();
          $repliesHistory.css('left', offset.left-mainOffset.left+width+10); // magic number
          $repliesHistory.css('top', offset.top-mainOffset.top-10); // magic number
          $repliesHistory.css({
            'z-index': 1,
          });
          $repliesHistoryContent.empty();
          var chats = [];
          var replyToId = $this.closest('.reply_item').attr('reply_to_id');
          while (replyToId) {
            var $replyItem = $('.reply_item[reply_id=' + replyToId + ']');
            var replyContent = $replyItem.find('.reply_content').text().trim();
            if (replyContent.length > 0) {
              chats.push([
                $($replyItem.find('.user_avatar').html()).attr({
                  height: '30px',
                  width: '30px',
                }), // avatar
                (replyContent.length>300?replyContent.substr(0,300)+'...':replyContent), // reply content
                '<a href="#'+replyToId+'" class="scroll_to_original" title="查看原文">↑</a>'
              ]);
            }
            replyToId = $replyItem.attr('reply_to_id');
          }
          if(chats.length > 0) {
            chats.reverse();

            $repliesHistoryContent.append('<div class="title">查看对话</div>');
            chats.forEach(function (pair, idx) {
              var $chat = $repliesHistoryContent.append('<div class="item"></div>');
              $chat.append(pair[0]); // 头像
              $chat.append($('<span>').text(pair[1])); // 内容
              $chat.append(pair[2]); // 查看原文 anchor
            });
            $repliesHistory.fadeIn('fast');
          }else{
            $repliesHistory.hide();
          }
        }
      }).on('mouseleave', '.reply_content a', function (e) {
        timer = setTimeout(function(){
          $repliesHistory.fadeOut('fast');
        }, 500);
      });
    }
    // END 显示被 at 用户的本页评论
  })();

  // 点赞
  $('.up_btn').click(function (e) {
    var $this = $(this);
    var replyId = $this.closest('.reply_area').attr('reply_id');
    $.ajax({
      url: '/reply/' + replyId + '/up',
      method: 'POST',
    }).done(function (data) {
      if (data.success) {
        $this.removeClass('invisible');
        var currentCount = Number($this.next('.up-count').text().trim()) || 0;
        if (data.action === 'up') {
          $this.next('.up-count').text(currentCount + 1);
          $this.addClass('uped');
        } else {
          if (data.action === 'down') {
            $this.next('.up-count').text(currentCount - 1);
            $this.removeClass('uped');
          }
        }
      } else {
        alert(data.message);
      }
    }).fail(function (xhr) {
      if (xhr.status === 403) {
        alert('请先登录，登陆后即可点赞。');
      }
    });
  });
  // END 点赞
  // 图片预览
  (function(){
    var $previewModal = $('#preview-modal');
    var $previewImage = $('#preview-image');
    var $body = $('body'); // cache

    $(document).on('click', '.markdown-text img', function(e) {
      var $img = $(this);
      // 图片被a标签包裹时，不显示弹层
      if ($img.parent('a').length > 0) {
        return;
      }
      showModal($img.attr('src'));
    });

    $previewModal.on('click', hideModal);

    $previewModal.on('hidden.bs.modal', function() {
      // 在预览框消失之后恢复 body 的滚动能力
      $body.css('overflow-y', 'scroll');
    })

    $previewModal.on('shown.bs.modal', function() {
      // 修复上次滚动留下的痕迹,可能会导致短暂的闪烁，不过可以接受
      // TODO: to be promote
      $previewModal.scrollTop(0);
    })

    function showModal(src) {
      $previewImage.attr('src', src);
      $previewModal.modal('show');
      // 禁止 body 滚动
      $body.css('overflow-y', 'hidden');
    }

    function hideModal() {
      $previewModal.modal('hide');
    }

  })()
  // END 图片预览
</script>